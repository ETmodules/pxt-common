{"entries":[{"timestamp":1735684062130,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"-lZA{bn9)xS2B=+Gkq$%\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"TRf+YL`Z!zea6JTaFsLC\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//% color=\"#EEAA00\" icon=\"\\uf31e\"\n//% block=\"ElecTricks\"\n//% block.loc.nl=\"ElecTricks\"\nnamespace EtCommon {\n\n    export enum Comparison {\n        //% block=\"=\"\n        //% block.loc.nl=\"=\"\n        COMP_EQ,\n        //% block=\"<>\"\n        //% block.loc.nl=\"<>\"\n        COMP_NEQ,\n        //% block=\">\"\n        //% block.loc.nl=\">\"\n        COMP_GT,\n        //% block=\"<\"\n        //% block.loc.nl=\"<\"\n        COMP_LT,\n        //% block=\">=\"\n        //% block.loc.nl=\">=\"\n        COMP_EGT,\n        //% block=\"<=\"\n        //% block.loc.nl=\"<=\"\n        COMP_ELT\n    }\n\n    class Message {\n        constructor(msg: string) {\n            let m = msg.split(';')\n            this.mod = m[0]\n            this.cmd = m[1]\n            this.sig = m[2]\n            this.val = m[3]\n        }\n        message(): string {\n            let msg = this.mod + \";\" + this.cmd + \";\" + this.sig + \";\" + this.val\n            return msg\n        }\n        public mod: string\n        public cmd: string\n        public sig: string\n        public val: string\n    }\n\n    class Messages {\n        public messages: Message[]\n        constructor() {\n            this.messages = []\n        }\n        add(msg: string): Message {\n            let m = new Message(msg)\n            if (m.cmd == \"E\")\n                return m // do not store events\n            this.messages.push(m)\n            return null\n        }\n        at(index: number): Message {\n            return this.messages[index]\n        }\n        value(module: string, command: string, signal: string): string {\n            for (let i: number = 0; i < this.messages.length; i++) {\n                let m = this.messages[i]\n                if (!m) continue\n                if (m.mod == module && m.cmd == command && m.sig == signal) {\n                    this.messages.removeAt(i)\n                    return m.val\n                }\n                else // cleanup corrupt messages\n                    if (m.mod.isEmpty() || !m.cmd.isEmpty() || m.sig.isEmpty())\n                        this.messages.removeAt(i)\n            }\n            return \"\"\n        }\n    }\n\n    let g_messages = new Messages\n\n    export type eventHandler = (id: string) => void\n    export type eventItem = { handler: eventHandler, module: string, signal: string }\n    export let eventArray: eventItem[] = []\n\n    function callEvent(module: string, signal: string) {\n        eventArray.forEach((item) => {\n            if (item.module == module && item.signal == signal)\n                item.handler(module)\n        })\n    }\n\n    serial.redirect(\n        SerialPin.P13,\n        SerialPin.P14,\n        BaudRate.BaudRate115200\n    )\n\n    serial.setRxBufferSize(64)\n    serial.setTxBufferSize(64)\n\n    let BUFFER = \"\"\n\n    serial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n        BUFFER = serial.readUntil(serial.delimiters(Delimiters.NewLine))\n        if (!BUFFER.isEmpty()) {\n            // an event message is not stored\n            // instead it is returned to be handled by 'callEvent'\n            let msg = g_messages.add(BUFFER)\n            BUFFER = \"\"\n            if (msg)\n                callEvent(msg.mod, msg.sig)\n        }\n    })\n\n    // wait until wemos is started\n    basic.showIcon(IconNames.SmallHeart)\n    while (serial.readUntil('\\n').isEmpty()) { }\n    basic.showIcon(IconNames.Heart)\n\n    export function getValue(module: string, command: string, signal: string): string {\n        let val = \"\"\n        do {\n            val = g_messages.value(module, command, signal)\n            basic.pause(1)  // anable 'onDataReceived' to receive a message\n        }                   // instead of 'yield' which isn't part of typescript\n        while (val.isEmpty())\n        return val\n    }\n\n    export function setValue(module: string, signal: string, value: string) {\n        let msg = module + \";S;\" + signal + \";\" + value\n        serial.writeLine(msg)\n    }\n\n    export function askValue(module: string, signal: string) {\n        let msg = module + \";A;\" + signal\n        serial.writeLine(msg)\n    }\n\n    export function compareValue(module: string, signal: string, value: string,\n        comp: Comparison) {\n        let msg = module + \";C;\" + signal + \";\" + value\n        switch (comp) {\n            case Comparison.COMP_EQ: msg += \"==|\"; break;\n            case Comparison.COMP_NEQ: msg += \"!=|\"; break;\n            case Comparison.COMP_GT: msg += \">|\"; break;\n            case Comparison.COMP_LT: msg += \"<|\"; break;\n            case Comparison.COMP_EGT: msg += \">=|\"; break;\n            case Comparison.COMP_ELT: msg += \"<=|\"; break;\n        }\n        serial.writeLine(msg)\n    }\n\n    export function waitValue(module: string, signal: string,\n        value: string, comp: Comparison) {\n        let msg = module + \";W;\" + signal + \";\" + value\n        switch (comp) {\n            case Comparison.COMP_EQ: msg += \"==|\"; break;\n            case Comparison.COMP_NEQ: msg += \"!=|\"; break;\n            case Comparison.COMP_GT: msg += \">|\"; break;\n            case Comparison.COMP_LT: msg += \"<|\"; break;\n            case Comparison.COMP_EGT: msg += \">=|\"; break;\n            case Comparison.COMP_ELT: msg += \"<=|\"; break;\n        }\n        serial.writeLine(msg)\n    }\n\n    //% block=\"a number from %min utai %max\"\n    //% block.loc.nl=\"een getal van %min t/m %max\"\n    //% min.defl=0 max.defl=10\n    export function randomInt(min: number, max: number): number {\n        let i = 0\n        if (min > max) {\n            i = min\n            min = max\n            max = i\n        }\n        i = max - min + 1\n        i = min + Math.floor(Math.random() * i)\n        return i\n    }\n\n    //% block=\"all modules\"\n    //% block.loc.nl=\"alle modules\"\n    export function all(): string {\n        return \"ALL\"\n    }\n\n    //% block=\"stop %id\"\n    //% block.loc.nl=\"stop %id\"\n    export function stop(id: string) {\n        EtCommon.setValue(id, \"stop\", \"true\")\n    }\n\n    //% block=\"wait %time sec\"\n    //% block.loc.nl=\"wacht %time sec\"\n    //% min.defl=1\n    export function wait(time: number) {\n        basic.pause(time * 1000)\n    }\n\n    //% color=\"#AA6600\"\n    //% block=\"comment: %dummy\"\n    //% block.loc.nl=\"uitleg: %dummy\"\n    //% min.defl=\"schrijf hier je uitleg\"\n    export function comment(dummy: string) {\n    }\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":6231,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":234,"start2":234,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests gaan hier; deze zal niet worden gecompileerd wanneer dit pakket wordt gebruikt als extensie.\n"}]}],"snapshots":[{"timestamp":1735684062129,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-common\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1735684216936}